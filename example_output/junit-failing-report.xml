<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
	<testsuite tests="12" failures="10" time="0.720" name="failing-tests">
		<properties>
			<property name="go.version" value="go1.12.1"></property>
		</properties>
		<testcase classname="failing-tests" name="it_should_support_defer_even_on_fails" time="0.010"></testcase>
		<testcase classname="failing-tests" name="it_should_assert_command" time="0.000">
			<failure message="Failed" type="">    + it_should_assert_command&#xA;    + assert_true &#39;ls /xxxtmp&#39;&#xA;    + ls /xxxtmp&#xA;    ls: /xxxtmp: No such file or directory&#xA;    + assert_eq 1 0 &#39;expecting command &#39;\&#39;&#39;ls /xxxtmp&#39;\&#39;&#39; to succeed&#39;&#xA;    + description=&#39;expecting command &#39;\&#39;&#39;ls /xxxtmp&#39;\&#39;&#39; to succeed&#39;&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40mexpecting command &#39;ls /xxxtmp&#39; to succeed (&#39;1&#39; == &#39;0&#39;) �[m&#xA;    ######################################## FAILED TEST: expecting command &#39;ls /xxxtmp&#39; to succeed (&#39;1&#39; == &#39;0&#39;)&#xA;    + exit 1&#xA;./failing-tests.sh:25:it_should_assert_command�[m</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_assert_command_with_description" time="0.000">
			<failure message="Failed" type="">    + it_should_assert_command_with_description&#xA;    + assert_true &#39;ls /xxxtmp&#39; &#39;assert_true with a description&#39;&#xA;    + ls /xxxtmp&#xA;    ls: /xxxtmp: No such file or directory&#xA;    + assert_eq 1 0 &#39;assert_true with a description&#39;&#xA;    + description=&#39;assert_true with a description&#39;&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40massert_true with a description (&#39;1&#39; == &#39;0&#39;) �[m&#xA;    ######################################## FAILED TEST: assert_true with a description (&#39;1&#39; == &#39;0&#39;)&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_negate_assert_match_correctly" time="0.010">
			<failure message="Failed" type="">    + it_should_negate_assert_match_correctly&#xA;    + assert_nmatch hallo ll&#xA;    + __SPEC_SH_NEGATE=1&#xA;    + assert_match hallo ll&#xA;    + set +o pipefail&#xA;    + printf %s hallo&#xA;    + grep -E -m1 -o ll&#xA;    + head -n1&#xA;    + grep -E ll&#xA;    ll&#xA;    + assert_eq 0 0 &#39;checking &#39;\&#39;&#39;hallo&#39;\&#39;&#39; to match /ll/&#39;&#xA;    + description=&#39;checking &#39;\&#39;&#39;hallo&#39;\&#39;&#39; to match /ll/&#39;&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40mchecking &#39;hallo&#39; to match /ll/ (&#39;0&#39; != &#39;0&#39;) �[m&#xA;    ######################################## FAILED TEST: checking &#39;hallo&#39; to match /ll/ (&#39;0&#39; != &#39;0&#39;)&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_compare_exit_code" time="0.010">
			<failure message="Failed" type="">    + it_should_compare_exit_code&#xA;    + false&#xA;    + assert_eq 0 0&#xA;    + description=&#xA;    + set +x&#xA;    ######################################## PASSED TEST: &#39;0&#39; == &#39;0&#39;&#xA;    + assert_eq 0 0 &#39;0 should be 0&#39;&#xA;    + description=&#39;0 should be 0&#39;&#xA;    + set +x&#xA;    ######################################## PASSED TEST: 0 should be 0 (&#39;0&#39; == &#39;0&#39;)&#xA;    + assert_eq 0 2&#xA;    + description=&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40m&#39;0&#39; == &#39;2&#39; �[m&#xA;    ######################################## FAILED TEST: &#39;0&#39; == &#39;2&#39;&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_compare_string" time="0.000">
			<failure message="Failed" type="">    + it_should_compare_string&#xA;    ++ echo hallo&#xA;    ++ tr l x&#xA;    + assert_eq haxxo haggo&#xA;    + description=&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40m&#39;haxxo&#39; == &#39;haggo&#39; �[m&#xA;    ######################################## FAILED TEST: &#39;haxxo&#39; == &#39;haggo&#39;&#xA;    + exit 1&#xA;./failing-tests.sh:51:it_should_compare_string�[m</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_compare_string_with_description" time="0.000">
			<failure message="Failed" type="">    + it_should_compare_string_with_description&#xA;    ++ echo hallo&#xA;    ++ tr l x&#xA;    + assert_eq haxxo haggo &#39;transforming string should work&#39;&#xA;    + description=&#39;transforming string should work&#39;&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40mtransforming string should work (&#39;haxxo&#39; == &#39;haggo&#39;) �[m&#xA;    ######################################## FAILED TEST: transforming string should work (&#39;haxxo&#39; == &#39;haggo&#39;)&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_match_regexp" time="0.310">
			<failure message="Failed" type="">    + it_should_match_regexp&#xA;    + sleep 0.3&#xA;    + assert_match aaa:88X09 &#39;aaa:[0-9]{5}&#39;&#xA;    + set +o pipefail&#xA;    + printf %s aaa:88X09&#xA;    + grep -E -m1 -o &#39;aaa:[0-9]{5}&#39;&#xA;    + head -n1&#xA;    + grep -E &#39;aaa:[0-9]{5}&#39;&#xA;    + assert_eq 1 0 &#39;checking &#39;\&#39;&#39;aaa:88X09&#39;\&#39;&#39; to match /aaa:[0-9]{5}/&#39;&#xA;    + description=&#39;checking &#39;\&#39;&#39;aaa:88X09&#39;\&#39;&#39; to match /aaa:[0-9]{5}/&#39;&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40mchecking &#39;aaa:88X09&#39; to match /aaa:[0-9]{5}/ (&#39;1&#39; == &#39;0&#39;) �[m&#xA;    ######################################## FAILED TEST: checking &#39;aaa:88X09&#39; to match /aaa:[0-9]{5}/ (&#39;1&#39; == &#39;0&#39;)&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_negate_assert_correctly" time="0.000">
			<failure message="Failed" type="">    + it_should_negate_assert_correctly&#xA;    + assert_false &#39;ls /&#39; &#39;this test should fail&#39;&#xA;    + __SPEC_SH_NEGATE=1&#xA;    + assert_true &#39;ls /&#39; &#39;this test should fail&#39;&#xA;    + ls /&#xA;    Applications&#xA;    Library&#xA;    Network&#xA;    System&#xA;    Users&#xA;    Volumes&#xA;    bin&#xA;    cores&#xA;    dev&#xA;    etc&#xA;    home&#xA;    installer.failurerequests&#xA;    net&#xA;    opt&#xA;    private&#xA;    sbin&#xA;    tmp&#xA;    usr&#xA;    var&#xA;    + assert_eq 0 0 &#39;this test should fail&#39;&#xA;    + description=&#39;this test should fail&#39;&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40mthis test should fail (&#39;0&#39; != &#39;0&#39;) �[m&#xA;    ######################################## FAILED TEST: this test should fail (&#39;0&#39; != &#39;0&#39;)&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_negate_assert_eq_correctly" time="0.000">
			<failure message="Failed" type="">    + it_should_negate_assert_eq_correctly&#xA;    + assert_neq 1 1&#xA;    + __SPEC_SH_NEGATE=1&#xA;    + assert_eq 1 1&#xA;    + description=&#xA;    + set +x&#xA;    �[1;37;41mfailed expectation:�[m �[1;38;40m&#39;1&#39; != &#39;1&#39; �[m&#xA;    ######################################## FAILED TEST: &#39;1&#39; != &#39;1&#39;&#xA;    + exit 1</failure>
		</testcase>
		<testcase classname="failing-tests" name="it_should_reflect_exit_code" time="0.000">
			<failure message="Failed" type="">    + it_should_reflect_exit_code&#xA;    + return 3&#xA;    + res=3&#xA;    + set +x</failure>
		</testcase>
		<testcase classname="failing-tests" name="after_all" time="0.000"></testcase>
	</testsuite>
</testsuites>
